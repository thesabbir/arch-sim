# Serverless Lambda Function Test
test:
  name: 'AWS Lambda Serverless Test'
  description: 'Test serverless architecture with AWS Lambda'
  author: 'Architecture Simulator'

architecture:
  name: 'Serverless API'
  description: 'Event-driven serverless API using AWS Lambda'

  application:
    language: 'javascript'
    runtime: 'node.js'
    framework: 'serverless'
    version: '3.x'

  databases:
    primary:
      type: 'dynamodb'
      provider: 'aws'
      plan: 'on_demand'
      size: 'small'

  hosting:
    backend:
      provider: 'aws'
      service_type: 'lambda'
      instance_type: 'serverless'
      auto_scaling: true

    api_gateway:
      provider: 'aws'
      service_type: 'api_gateway'
      plan: 'pay_per_request'

  services:
    monitoring:
      error_tracking:
        provider: 'aws'
        plan: 'cloudwatch'

    queue:
      provider: 'aws'
      service: 'sqs'
      plan: 'standard'

  load_profile:
    concurrent_users: 500
    requests_per_second: 200
    peak_multiplier: 10
    data_size: '500mb'
    read_write_ratio: '60:40'
    geographic_distribution:
      - region: 'us-east'
        percentage: 70
      - region: 'us-west'
        percentage: 30

  performance_targets:
    response_time_p95: 200
    uptime_sla: 99.95
    throughput_rps: 500

  budget:
    monthly_limit: 150
    currency: 'usd'
    alerts_at: 70
    optimization_priority: 'performance'

  development:
    team_size: 3
    deployment_frequency: 'continuous'
    monitoring_level: 'advanced'
    compliance_requirements: ['gdpr']

# Test expectations
expectations:
  validation:
    should_be_valid: true
    max_issues: 0
    max_warnings: 2

  performance:
    min_rps: 2000
    max_response_time: 150
    should_meet_targets: true

  cost:
    max_monthly_cost: 150
    should_be_within_budget: true
    max_budget_usage: 100

  recommendations:
    max_critical: 0
    max_high: 2
    should_include_types: ['cold_start', 'scaling']
